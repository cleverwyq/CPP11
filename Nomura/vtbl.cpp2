#include <iostream>

using namespace std;

class A {
public:
    virtual void f() {
        cout << "A:f()" <<"," << i << endl;
    }

    int i = 3;
};

void g() { cout <<" g called" <<endl; }
int main()
{
    A a;
    cout << "a add:"<< &a << endl;

    typedef void(*ptr2g)();
    ptr2g p2 = &g;
    cout << "g :" << p2 << "," << &g << endl;
    (*&g)();
    cout << "end g"<<endl;

    typedef void (A::*ptr2m)();
    ptr2m p1 = &(a.f);  //&A::f;
    (a.*p1)();

    A a2;
    a2.i = 4;
    (a2.*p1)();

    //(a.*p1)();
    //cout << "a.f add:" << (a.*p1) << endl;


    auto trick = reinterpret_cast<void*>((&a)+1);
    cout << &a <<"," << &a + 1 << "," << trick <<endl;
    //auto trick_p = reinterpret_cast<ptr2m>(trick);
    //(a.*trick_p)();
}
